{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "command-menu",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "@brodin-ui/use-is-mac",
    "@brodin-ui/use-mutation-observer",
    "@brodin-ui/button",
    "@brodin-ui/command",
    "@brodin-ui/kbd"
  ],
  "files": [
    {
      "path": "registry/default/components/command-menu.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { ArrowRightIcon, CornerDownLeftIcon, SearchIcon } from \"lucide-react\"\n\nimport { useIsMac } from \"@/registry/default/hooks/use-is-mac\"\nimport { useMutationObserver } from \"@/registry/default/hooks/use-mutation-observer\"\nimport { cn } from \"@/registry/default/lib/utils\"\nimport { Button } from \"@/registry/default/ui/button\"\nimport {\n  CommandDialog,\n  CommandEmpty,\n  CommandFooter,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/registry/default/ui/command\"\nimport { Kbd } from \"@/registry/default/ui/kbd\"\n\nexport function CommandMenu({\n  navItems,\n  ...props\n}: DialogProps & {\n  navItems?: { href: string; label?: string }[]\n}) {\n  const router = useRouter()\n  const isMac = useIsMac()\n  const [open, setOpen] = React.useState(false)\n  const [selectedType, setSelectedType] = React.useState<\"page\" | null>(null)\n\n  React.useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if ((e.key === \"k\" && (e.metaKey || e.ctrlKey)) || e.key === \"/\") {\n        if (\n          (e.target instanceof HTMLElement && e.target.isContentEditable) ||\n          e.target instanceof HTMLInputElement ||\n          e.target instanceof HTMLTextAreaElement ||\n          e.target instanceof HTMLSelectElement\n        ) {\n          return\n        }\n\n        e.preventDefault()\n        setOpen((open) => !open)\n      }\n    }\n\n    document.addEventListener(\"keydown\", down)\n    return () => document.removeEventListener(\"keydown\", down)\n  }, [])\n\n  const runCommand = React.useCallback((command: () => unknown) => {\n    setOpen(false)\n    command()\n  }, [])\n\n  return (\n    <>\n      <Button\n        variant=\"secondary\"\n        className={cn(\n          \"bg-card text-card-foreground/60 relative h-8 w-full justify-start font-normal shadow-none\"\n        )}\n        onClick={() => setOpen(true)}\n        {...props}\n      >\n        <SearchIcon />\n        <Kbd>{isMac ? \"âŒ˜\" : \"Ctrl\"} K</Kbd>\n      </Button>\n      <CommandDialog\n        title=\"Search documentation...\"\n        description=\"Search for a command to run...\"\n        open={open}\n        onOpenChange={setOpen}\n      >\n        <CommandInput placeholder=\"Search documentation...\" />\n        <CommandList>\n          <CommandEmpty>No results found.</CommandEmpty>\n          {navItems ? (\n            <CommandGroup heading=\"Pages\">\n              {navItems.map((item) => (\n                <CommandMenuItem\n                  key={item.href}\n                  value={`Navigation ${item.label}`}\n                  keywords={[\n                    \"nav\",\n                    \"navigation\",\n                    item.label?.toLowerCase() ?? item.href.toLowerCase(),\n                  ]}\n                  onHighlight={() => {\n                    setSelectedType(\"page\")\n                  }}\n                  onSelect={() => {\n                    runCommand(() => router.push(item.href))\n                  }}\n                >\n                  <ArrowRightIcon />\n                  {item.label}\n                </CommandMenuItem>\n              ))}\n            </CommandGroup>\n          ) : null}\n        </CommandList>\n        <CommandFooter>\n          <div className=\"flex min-w-0 shrink-0 items-center gap-2\">\n            <Kbd>\n              <CornerDownLeftIcon />\n            </Kbd>{\" \"}\n            <span className=\"\">\n              {selectedType === \"page\" || selectedType === \"component\"\n                ? \"Go to Page\"\n                : null}\n            </span>\n          </div>\n        </CommandFooter>\n      </CommandDialog>\n    </>\n  )\n}\n\nfunction CommandMenuItem({\n  children,\n  className,\n  onHighlight,\n  ...props\n}: React.ComponentProps<typeof CommandItem> & {\n  onHighlight?: () => void\n  \"data-selected\"?: string\n  \"aria-selected\"?: string\n}) {\n  const ref = React.useRef<HTMLDivElement>(null)\n\n  useMutationObserver(ref, (mutations) => {\n    mutations.forEach((mutation) => {\n      if (\n        mutation.type === \"attributes\" &&\n        mutation.attributeName === \"aria-selected\" &&\n        ref.current?.getAttribute(\"aria-selected\") === \"true\"\n      ) {\n        onHighlight?.()\n      }\n    })\n  })\n\n  return (\n    <CommandItem ref={ref} className={cn(className)} {...props}>\n      {children}\n    </CommandItem>\n  )\n}\n",
      "type": "registry:component"
    }
  ]
}