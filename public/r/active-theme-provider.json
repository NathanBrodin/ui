{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "active-theme-provider",
  "type": "registry:component",
  "files": [
    {
      "path": "registry/default/components/providers/active-theme-provider.tsx",
      "content": "\"use client\"\n\nimport {\n  createContext,\n  ReactNode,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\"\n\nconst COOKIE_NAME = \"active_theme\"\nconst DEFAULT_THEME = \"default\"\n\nexport const baseColors = [\n  {\n    name: \"default\",\n    label: \"Default\",\n  },\n  {\n    name: \"blue\",\n    label: \"Zed\",\n  },\n] as const\n\nexport type BaseColor = (typeof baseColors)[number]\n\nfunction setThemeCookie(theme: string) {\n  if (typeof window === \"undefined\") return\n\n  document.cookie = `${COOKIE_NAME}=${theme}; path=/; max-age=31536000; SameSite=Lax; ${\n    window.location.protocol === \"https:\" ? \"Secure;\" : \"\"\n  }`\n}\n\ntype ThemeContextType = {\n  activeTheme: string\n  setActiveTheme: (theme: string) => void\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined)\n\nexport function ActiveThemeProvider({ children }: { children: ReactNode }) {\n  const [activeTheme, setActiveTheme] = useState<string>(DEFAULT_THEME)\n\n  useEffect(() => {\n    const cookie = document.cookie\n      .split(\"; \")\n      .find((row) => row.startsWith(`${COOKIE_NAME}=`))\n    if (cookie) {\n      const cookieTheme = cookie.split(\"=\")[1]\n      if (cookieTheme && cookieTheme !== activeTheme) {\n        setActiveTheme(cookieTheme)\n      }\n    }\n    // eslint-disable-next-line\n  }, [])\n\n  useEffect(() => {\n    setThemeCookie(activeTheme)\n\n    Array.from(document.body.classList)\n      .filter((className) => className.startsWith(\"theme-\"))\n      .forEach((className) => {\n        document.body.classList.remove(className)\n      })\n\n    document.body.classList.add(`theme-${activeTheme}`)\n    if (activeTheme.endsWith(\"-scaled\")) {\n      document.body.classList.add(\"theme-scaled\")\n    }\n  }, [activeTheme])\n\n  return (\n    <ThemeContext.Provider value={{ activeTheme, setActiveTheme }}>\n      <script\n        dangerouslySetInnerHTML={{\n          __html: `\n          (function() {\n            try {\n              const themeCookie = document.cookie\n                .split('; ')\n                .find(row => row.startsWith('active_theme='));\n              if (themeCookie) {\n                const theme = themeCookie.split('=')[1];\n                document.body.classList.add('theme-' + theme);\n              }\n            } catch (e) {}\n          })();\n        `,\n        }}\n      />\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n\nexport function useThemeConfig() {\n  const context = useContext(ThemeContext)\n  if (context === undefined) {\n    throw new Error(\"useThemeConfig must be used within an ActiveThemeProvider\")\n  }\n  return context\n}\n",
      "type": "registry:component",
      "target": "components/providers/active-theme-provider.tsx"
    }
  ]
}