{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "app",
  "type": "registry:block",
  "description": "Setup a full next.js app with this block",
  "dependencies": [
    "next"
  ],
  "registryDependencies": [
    "http://localhost:3000/r/use-layout.json",
    "http://localhost:3000/r/use-meta-color.json",
    "http://localhost:3000/r/active-theme.json",
    "http://localhost:3000/r/theme-provider.json",
    "http://localhost:3000/r/config.json",
    "http://localhost:3000/r/index.json",
    "sonner"
  ],
  "files": [
    {
      "path": "registry/default/blocks/app/app/layout.tsx",
      "content": "import type { Metadata } from \"next\"\nimport { Geist_Mono, Lora } from \"next/font/google\"\nimport localFont from \"next/font/local\"\n\nimport \"@/registry/default/styles/globals.css\"\n\nimport { ActiveThemeProvider } from \"@/registry/default/components/active-theme\"\nimport { ThemeProvider } from \"@/registry/default/components/theme-provider\"\nimport { LayoutProvider } from \"@/registry/default/hooks/use-layout\"\nimport { META_THEME_COLORS } from \"@/registry/default/hooks/use-meta-color\"\nimport { siteConfig } from \"@/registry/default/lib/config\"\nimport { Toaster } from \"@/registry/default/ui/sonner\"\n\nconst lora = Lora({\n  variable: \"--font-display\",\n  subsets: [\"latin\"],\n})\n\nconst writer = localFont({\n  src: \"../../../assets/fonts/writer.ttf\",\n  variable: \"--font-sans\",\n})\n\nconst geistMono = Geist_Mono({\n  variable: \"--font-geist-mono\",\n  subsets: [\"latin\"],\n})\n\nexport const metadata: Metadata = {\n  title: {\n    default: siteConfig.name,\n    template: `%s - ${siteConfig.name}`,\n  },\n  metadataBase: new URL(process.env.NEXT_PUBLIC_APP_URL!),\n  description: siteConfig.description,\n  keywords: [\"Next.js\", \"React\", \"Tailwind CSS\", \"Components\", \"shadcn\"],\n  authors: [\n    {\n      name: \"Nathan Brodin\",\n      url: \"https://brodin.dev\",\n    },\n  ],\n  creator: \"nathan brodin\",\n  openGraph: {\n    type: \"website\",\n    locale: \"en_US\",\n    url: process.env.NEXT_PUBLIC_APP_URL!,\n    title: siteConfig.name,\n    description: siteConfig.description,\n    siteName: siteConfig.name,\n    images: [\n      {\n        url: `${process.env.NEXT_PUBLIC_APP_URL}/opengraph-image.png`,\n        width: 1200,\n        height: 630,\n        alt: siteConfig.name,\n      },\n    ],\n  },\n  twitter: {\n    card: \"summary_large_image\",\n    title: siteConfig.name,\n    description: siteConfig.description,\n    images: [`${process.env.NEXT_PUBLIC_APP_URL}/opengraph-image.png`],\n    creator: \"@shadcn\",\n  },\n  icons: {\n    icon: \"/favicon.ico\",\n    shortcut: \"/favicon-16x16.png\",\n    apple: \"/apple-touch-icon.png\",\n  },\n  manifest: `${siteConfig.url}/site.webmanifest`,\n}\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode\n}>) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <head>\n        <script\n          dangerouslySetInnerHTML={{\n            __html: `\n              try {\n                if (localStorage.theme === 'dark' || ((!('theme' in localStorage) || localStorage.theme === 'system') && window.matchMedia('(prefers-color-scheme: dark)').matches)) {\n                  document.querySelector('meta[name=\"theme-color\"]').setAttribute('content', '${META_THEME_COLORS.dark}')\n                }\n                if (localStorage.layout) {\n                  document.documentElement.classList.add('layout-' + localStorage.layout)\n                }\n              } catch (_) {}\n            `,\n          }}\n        />\n        <meta name=\"theme-color\" content={META_THEME_COLORS.light} />\n      </head>\n      <body\n        className={`${lora.variable} ${writer.variable} ${geistMono.variable} overscroll-none font-sans antialiased [--footer-height:calc(var(--spacing)*14)] [--header-height:calc(var(--spacing)*14)] xl:[--footer-height:calc(var(--spacing)*24)]`}\n      >\n        <ThemeProvider\n          attribute=\"class\"\n          defaultTheme=\"system\"\n          enableSystem\n          disableTransitionOnChange\n        >\n          <LayoutProvider>\n            <ActiveThemeProvider>\n              {children}\n              <Toaster position=\"top-center\" />\n            </ActiveThemeProvider>\n          </LayoutProvider>\n        </ThemeProvider>\n      </body>\n    </html>\n  )\n}\n",
      "type": "registry:page",
      "target": "app/layout.tsx"
    }
  ]
}