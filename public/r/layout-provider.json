{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "layout-provider",
  "type": "registry:component",
  "files": [
    {
      "path": "registry/default/components/providers/layout-provider.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\ntype Layout = \"fixed\" | \"full\"\n\ninterface LayoutProviderProps {\n  children: React.ReactNode\n  defaultLayout?: Layout\n  forcedLayout?: Layout\n  storageKey?: string\n  attribute?: string | string[]\n  value?: Record<string, string>\n}\n\ninterface LayoutProviderState {\n  layout: Layout\n  setLayout: (layout: Layout | ((prev: Layout) => Layout)) => void\n  forcedLayout?: Layout\n}\n\nconst isServer = typeof window === \"undefined\"\nconst LayoutContext = React.createContext<LayoutProviderState | undefined>(\n  undefined\n)\n\nconst saveToLS = (storageKey: string, value: string) => {\n  try {\n    localStorage.setItem(storageKey, value)\n  } catch {\n    // Unsupported\n  }\n}\n\nconst useLayout = () => {\n  const context = React.useContext(LayoutContext)\n  if (context === undefined) {\n    throw new Error(\"useLayout must be used within a LayoutProvider\")\n  }\n  return context\n}\n\nconst Layout = ({\n  forcedLayout,\n  storageKey = \"layout\",\n  defaultLayout = \"full\",\n  attribute = \"class\",\n  value,\n  children,\n}: LayoutProviderProps) => {\n  const [layout, setLayoutState] = React.useState<Layout>(() => {\n    if (isServer) return defaultLayout\n    try {\n      const saved = localStorage.getItem(storageKey)\n      if (saved === \"fixed\" || saved === \"full\") {\n        return saved\n      }\n      return defaultLayout\n    } catch {\n      return defaultLayout\n    }\n  })\n\n  const attrs = React.useMemo(\n    () => (!value ? [\"layout-fixed\", \"layout-full\"] : Object.values(value)),\n    [value]\n  )\n\n  const applyLayout = React.useCallback(\n    (layout: Layout) => {\n      if (!layout) return\n\n      const name = value ? value[layout] : `layout-${layout}`\n      const d = document.documentElement\n\n      const handleAttribute = (attr: string) => {\n        if (attr === \"class\") {\n          d.classList.remove(...attrs)\n          if (name) d.classList.add(name)\n        } else if (attr.startsWith(\"data-\")) {\n          if (name) {\n            d.setAttribute(attr, name)\n          } else {\n            d.removeAttribute(attr)\n          }\n        }\n      }\n\n      if (Array.isArray(attribute)) attribute.forEach(handleAttribute)\n      else handleAttribute(attribute)\n    },\n    [attrs, attribute, value]\n  )\n\n  const setLayout = React.useCallback(\n    (value: Layout | ((prev: Layout) => Layout)) => {\n      if (typeof value === \"function\") {\n        setLayoutState((prevLayout) => {\n          const newLayout = value(prevLayout)\n          saveToLS(storageKey, newLayout)\n          return newLayout\n        })\n      } else {\n        setLayoutState(value)\n        saveToLS(storageKey, value)\n      }\n    },\n    [storageKey]\n  )\n\n  // localStorage event handling\n  React.useEffect(() => {\n    const handleStorage = (e: StorageEvent) => {\n      if (e.key !== storageKey) return\n\n      if (!e.newValue) {\n        setLayout(defaultLayout)\n      } else if (e.newValue === \"fixed\" || e.newValue === \"full\") {\n        setLayoutState(e.newValue)\n      }\n    }\n\n    window.addEventListener(\"storage\", handleStorage)\n    return () => window.removeEventListener(\"storage\", handleStorage)\n  }, [setLayout, storageKey, defaultLayout])\n\n  // Apply layout on mount and when it changes\n  React.useEffect(() => {\n    const currentLayout = forcedLayout ?? layout\n    applyLayout(currentLayout)\n  }, [forcedLayout, layout, applyLayout])\n\n  // Prevent layout changes during hydration\n  const [isHydrated, setIsHydrated] = React.useState(false)\n  React.useEffect(() => {\n    setIsHydrated(true)\n  }, [])\n\n  const providerValue = React.useMemo(\n    () => ({\n      layout: isHydrated ? layout : defaultLayout,\n      setLayout,\n      forcedLayout,\n    }),\n    [layout, setLayout, forcedLayout, isHydrated, defaultLayout]\n  )\n\n  return (\n    <LayoutContext.Provider value={providerValue}>\n      {children}\n    </LayoutContext.Provider>\n  )\n}\n\nconst LayoutProvider = (props: LayoutProviderProps) => {\n  const context = React.useContext(LayoutContext)\n\n  // Ignore nested context providers, just passthrough children\n  if (context) return <>{props.children}</>\n  return <Layout {...props} />\n}\n\nexport { useLayout, LayoutProvider }\n",
      "type": "registry:component",
      "target": "components/providers/layout-provider.tsx"
    }
  ]
}